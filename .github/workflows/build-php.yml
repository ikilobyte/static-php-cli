name: Build PHP

on:
    push:
        branches: [ bash-version ]
        paths:
            - ".github/workflows/**.yml"
            - "docker/**"

jobs:
    integration:
        name: Build PHP ${{ matrix.php-versions }} for ${{ matrix.arch }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php-versions: [ "7.2.34" ]
                arch: [ "x86_64", "aarch64" ]
        steps:
            -   uses: actions/checkout@v2
            -   name: Check Dockerfile to ${{ matrix.arch }}
                run: |
                    cd docker/
                    if [[ "${{ matrix.arch }}" != "x86_64" ]]; then
                      if [[ "${{ matrix.arch }}" = "armv7l" ]]; then
                        sed -ie 's/alpine:latest/multiarch\/alpine:armv7-latest-stable/g' Dockerfile
                      else
                        sed -ie 's/alpine:3.16/multiarch\/alpine:aarch64-edge/g' Dockerfile
                      fi
                      docker run --rm --privileged multiarch/qemu-user-static:register --reset
                    fi
            -   name: Build micro and PHP distribution ${{ matrix.php-versions }} for ${{ matrix.arch }}
                id: buildphp
                run: |
                    cd docker/ && docker build . --tag static-php --build-arg USE_BACKUP_ADDRESS=yes && \
                      mkdir ../dist && \
                      docker run --rm -v $(pwd)/../dist:/dist/ static-php build-php original ${{ matrix.php-versions }} all /dist/
            -   name: Fail if anything failed
                if: steps.buildphp == 'failure'
                run: |
                    false
            -   name: Upload Artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: static-php-cli_${{ matrix.php-versions }}_${{ matrix.arch }}
                    path: |
                        dist
            
            -   name: Remove dist directory
                run: |
                    rm -rf dist/
                    docker images | grep -v REPOSITORY | awk '{print $3}' | xargs docker rmi --force
